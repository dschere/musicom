
musicom is a docker application that compiles and executes a golang file 
containing a musicom.Song structure. The docker image contains fluidsynth
for playing midi sounds as well as ffplay/ffmpeg for live audio sampling.
Foruthermore is contains ladspa effects.

To create music the user creates a go structure such as this:

import "musicom"


  Song("stuff").
    timesig("4/4").
    key("C").
    beat(120).
    
    define_effect("dreamy", REVERB_CATHEDRAL{}, ECHO{}). 

    define_track("g1", ACOUSTIC_STEEL_GUITAR, TrackOpts{ legato: true })
    define_track("p", DRUMS)
 
    measure("m1").
       track("g1", Eff("dreamy"), Dq, N2_0, De,N5_1,N4_2,N3_2,N5_1,N4_2,N3_2).
       track("p" , Dw, ACOUSTIC_SNARE).
    measure().
       track("g1", Eff(""), Dq, N2_0, De,N5_0,N4_2,N3_2,N5_0,N4_2,N3_2).
       track("p" , Dw, ACOUSTIC_SNARE).
    repeat("m1",1).
  play() 





define_effect("<tag>", [settings])
Eff(<tag>, <tag1>, ...) // effects can be summed

Eff("") // clear effect settins


Combined effects and notes

// fret 3 string 2, D note, being up to D# using half the duration then hold
N2_3.b()
N2_3.B() // bend up a whole step
N2_3.br() // bend and release
N2_3.Br() 
 
N2_3.b().v() // bend followed by vibrato



C(4_2,3_2,2_1).u() // upstroke (half duration)
C(4_2,3_2,2_1).d() // downstroke

// apply effects to a single note or chord

N2_3.e('chorus')

// and off course daisy chained

// upstroke takes 100% duration, chorus applied to chord
C(4_2,3_2,2_1).u(1.0).e('chorus') 


// effects that take incrementally

define_effect("pansweep",pan_sweep)

func pan_sweep(s *Song_, sfb int) {
    // sixty forth of a beat 
}  




